name: instance template creator CI

on:
  pull_request:

jobs:
  build:
    name: Create a machine image
    runs-on: ubuntu-latest
    env:
      GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
      PACKER_GITHUB_API_TOKEN: ${{secrets.PACKER_GITHUB_API_TOKEN}}
      MACHINE_TYPE: ${{vars.MACHINE_TYPE}}
      TAGS: ${{vars.TAGS}}
      IMAGE: ${{ secrets.IMAGE }}
      BOOT_DISK_SIZE: ${{vars.BOOT_DISK_SIZE}} 
      BOOT_DISK_TYPE: ${{vars.BOOT_DISK_TYPE}} 
      NETWORK: ${{vars.NETWORK}} 
      SUBNET: ${{vars.SUBNET}}
      NETWORK_TIER: ${{vars.NETWORK_TIER}} 
      SERVICE_ACCOUNT: ${{ secrets.SERVICE_ACCOUNT }} 
      SCOPES: ${{vars.SCOPES}}
      DB_USER: ${{ secrets.SQL_DB_USER }}
      DB_PASSWORD: ${{ secrets.SQL_DB_PASSWORD }}
      DB_HOST: ${{ secrets.SQL_DB_HOST }} 
      DB_NAME: ${{ secrets.SQL_DB_NAME }}
      REGION: ${{vars.REGION}}
      GROUP_NAME: ${{ secrets.GROUP_NAME }}
      DB_INSTANCE_CONNECTION: ${{vars.DB_INSTANCE_CONNECTION_NAME}}
      PROJECT : ${{vars.PROJECT_ID}}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}'
          create_credentials_file: true
          export_environment_variables: true

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: 'Use gcloud CLI'
        run: 'gcloud info'
      - name: 'Generate Template Name with Timestamp'
        id: generate-timestamp
        run: |
          echo "TEMPLATE_NAME=csye6225-vm-$(date +%Y-%m-%d-%H-%M-%S)" >> $GITHUB_ENV

      - name: 'Creating instance template'
        run: |
          gcloud compute instance-templates create $TEMPLATE_NAME \
            --machine-type=${{ env.MACHINE_TYPE }} \
            --tags=${{ env.TAGS }} \
            --image=${{ env.MY_MI }} \
            --region=${{ env.REGION }} \
            --instance-template-region=${{ env.REGION }} \
            --boot-disk-size=${{ env.BOOT_DISK_SIZE }} \
            --boot-disk-type=${{ env.BOOT_DISK_TYPE }} \
            --network-interface="network=${{ env.NETWORK }},subnet=${{ env.SUBNET }},network-tier=${{ env.NETWORK_TIER }}" \
            --service-account=${{ env.SERVICE_ACCOUNT }} \
            --scopes=${{ env.SCOPES }} \
            --metadata=startup-script="#! /bin/bash echo 'DB_USER=${{env.DB_USER}}' >> /opt/webapp/.env && echo 'DB_PASSWORD=${{env.DB_PASSWORD}}' >> /opt/webapp/.env && echo 'DB_NAME=${{env.DB_NAME}}' >> /opt/webapp/.env && echo 'DB_INSTANCE_NAME=${{env.DB_INSTANCE_CONNECTION}}' >> /opt/webapp/.env && echo 'DB_HOST=\"${{env.DB_HOST}}\"' >> /opt/webapp/.env && echo 'PROJECT_ID=\"${{env.PROJECT}}\"' >> /opt/webapp/.env"

      - name: 'Configure MIG to use new template'
        run: |
          gcloud compute instance-groups managed set-instance-template \
           ${{ env.GROUP_NAME }} \
            --template=projects/${{ env.GCLOUD_PROJECT }}/regions/${{ env.REGION }}/instanceTemplates/${{ env.TEMPLATE_NAME }} \
            --region=${{ env.REGION }}

      - name: 'Start rolling update'
        run: |
          gcloud compute instance-groups managed rolling-action start-update ${{ env.GROUP_NAME }} \
            --version=template=projects/${{ env.GCLOUD_PROJECT }}/regions/${{ env.REGION }}/instanceTemplates/${{ env.TEMPLATE_NAME }} \
            --region=${{ env.REGION }} \
            --type=proactive
