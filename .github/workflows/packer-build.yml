name: GitHub action

on:
  push:
    branches: ["main"]

env:
  HOST: ${{ secrets.HOST }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Configure MySQL
      run: |
        sudo service mysql start
        sudo mysql -u root -p"${{ secrets.MYSQL_ROOT_PASSWORD }}" -e "CREATE DATABASE IF NOT EXISTS ${{ secrets.DB_NAME }};"
        sudo mysql -u root -p"${{ secrets.MYSQL_ROOT_PASSWORD }}" -e "CREATE USER IF NOT EXISTS ${{ secrets.DB_USER }}@'localhost' IDENTIFIED BY '${{ secrets.DB_USER_PASSWORD }}';"
        sudo mysql -u root -p"${{ secrets.MYSQL_ROOT_PASSWORD }}" -e "GRANT ALL PRIVILEGES ON ${{ secrets.DB_NAME }}.* TO ${{ secrets.DB_USER }}@'localhost';"
        sudo mysql -u root -p"${{ secrets.MYSQL_ROOT_PASSWORD }}" -e "FLUSH PRIVILEGES;"
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.x

    - name: Create virtual environment
      run: |
        python -m venv venv
        source venv/bin/activate
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest requests 
      
    - name: Wait and Run Integration Test
      run: |
        sleep 15
        pytest tests/integration.py

  gcloud:
    runs-on: ubuntu-latest
    env:
      GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
      PACKER_GITHUB_API_TOKEN: ${{secrets.PACKER_GITHUB_API_TOKEN}}
      MACHINE_TYPE: ${{vars.MACHINE_TYPE}}
      TAGS: ${{vars.TAGS}}
      IMAGE: ${{ secrets.IMAGE }}
      BOOT_DISK_SIZE: ${{vars.BOOT_DISK_SIZE}} 
      BOOT_DISK_TYPE: ${{vars.BOOT_DISK_TYPE}} 
      NETWORK: ${{vars.NETWORK}} 
      SUBNET: ${{vars.SUBNET}}
      NETWORK_TIER: ${{vars.NETWORK_TIER}} 
      SERVICE_ACCOUNT: ${{ secrets.SERVICE_ACCOUNT }} 
      SCOPES: ${{vars.SCOPES}}
      DB_USER: ${{ secrets.SQL_DB_USER }}
      DB_PASSWORD: ${{ secrets.SQL_DB_PASSWORD }}
      DB_HOST: ${{ secrets.SQL_DB_HOST }} 
      DB_NAME: ${{ secrets.SQL_DB_NAME }}
      REGION: ${{vars.REGION}}
      GROUP_NAME: ${{ secrets.GROUP_NAME }}
      DB_INSTANCE_CONNECTION: ${{secrets.DB_INSTANCE_CONNECTION_NAME}}
      PROJECT : ${{secrets.PROJECT_ID}}

    needs: test
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Authenticate with Google Cloud
      uses: google-github-actions/auth@v2
      with: 
        credentials_json: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
        create_credentials_file: true
        export_environment_variables: true
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Build Artifact
      run: |
        zip -r webapp.zip ./

    - name: Set up Packer
      uses: hashicorp/setup-packer@main
      with:
        version: latest

    - name: build image
      run: |
        packer init .
        packer build .

    - name: Fetch the Image Name
      run: |          
        MY_MI=$(jq -r '.builds[0].artifact_id' image_manifest.json)
        echo "MY_MI=$MY_MI" >> $GITHUB_ENV

    - name: 'Generating Template Name with Current Timestamp'
      id: generate-timestamp
      run: |
        echo "TEMPLATE_NAME=csye6225-vm-$(date +%Y-%m-%d-%H-%M-%S)" >> $GITHUB_ENV

    - name: 'Creating instance template'
      run: |
        gcloud compute instance-templates create $TEMPLATE_NAME \
          --machine-type=${{ env.MACHINE_TYPE }} \
          --tags=${{ env.TAGS }} \
          --image=${{ env.MY_MI }} \
          --region=${{ env.REGION }} \
          --instance-template-region=${{ env.REGION }} \
          --boot-disk-size=${{ env.BOOT_DISK_SIZE }} \
          --boot-disk-type=${{ env.BOOT_DISK_TYPE }} \
          --network-interface="network=${{ env.NETWORK }},subnet=${{ env.SUBNET }},network-tier=${{ env.NETWORK_TIER }}" \
          --service-account=${{ env.SERVICE_ACCOUNT }} \
          --scopes=${{ env.SCOPES }} \
          --metadata=startup-script="echo "DB_USER=${{env.DB_USER}}" >> /opt/webapp/.env && echo "DB_PASSWORD=${{env.DB_PASSWORD}}" >> /opt/webapp/.env && echo "DB_NAME=${{env.DB_NAME}}" >> /opt/webapp/.env && echo "DB_INSTANCE_NAME=${{env.DB_INSTANCE_CONNECTION}}" >> /opt/webapp/.env && echo "DB_HOST=\"${{env.DB_HOST}}\"" >> /opt/webapp/.env && echo "PROJECT_ID=\"${{env.PROJECT}}\"" >> /opt/webapp/.env"
          
    - name: 'Configure MIG to use new template'
      run: |
        gcloud compute instance-groups managed set-instance-template \
          ${{ env.GROUP_NAME }} \
          --template=projects/${{ env.GCLOUD_PROJECT }}/regions/${{ env.REGION }}/instanceTemplates/${{ env.TEMPLATE_NAME }} \
          --region=${{ env.REGION }}

    - name: 'Start rolling update'
      run: |
        gcloud compute instance-groups managed rolling-action start-update ${{ env.GROUP_NAME }} \
          --version=template=projects/${{ env.GCLOUD_PROJECT }}/regions/${{ env.REGION }}/instanceTemplates/${{ env.TEMPLATE_NAME }} \
          --region=${{ env.REGION }} \
          --type=proactive

    - name: 'Check rolling update'
      run: |
        gcloud compute instance-groups managed wait-until ${{ env.GROUP_NAME }} \
        --version-target-reached \
          --region=${{env.REGION}}
